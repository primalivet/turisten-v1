// --------------------------------------------------------------------------
// Variables
// --------------------------------------------------------------------------

// Perfered font-family
$base-font-family: "Helvetica", "Arial", sans-serif;

// Perfered font-size.
$base-font-size: .875rem;

// Perfered line-height
$base-line-height: 1.5;

// Vertical flow based on font-size and line-height. DO NOT EDIT!
$base-spacing-unit: $base-font-size * $base-line-height;

$base-spacing-unit-half: $base-spacing-unit/2;
$base-spacing-unit-quarter: $base-spacing-unit/4;

// Breakpoints. If you need more breakpoints just append a fourth variable
// here that follows the naming pattern and increment the ending number.
// After that see the chapter on "Breakpoints".
$base-bp1: 400px;
$base-bp2: 800px;
$base-bp3: 1200px;

// --------------------------------------------------------------------------
// Arguments
// --------------------------------------------------------------------------

$base-font-auto-scale: true;

// The baseline grid controls vertical flow and rythem for general elements
// and typeography. This is not a reset or a normalizer.
$use-baseline-grid: true;

// If you want to, there's an optional grid to generate in this file. It's
// turend on by default.
$use-grid: true;

// Weather or not to use additional helper classes. Scroll down to Helpers
// chapter for a closer look.
$use-helpers: true;

//
$use-tiles: true;

//
$use-image-module: true;

//
$use-video-module: true;

// --------------------------------------------------------------------------
// Dependencies
// --------------------------------------------------------------------------

// Switch box-model
*,
*:before,
*:after {
  @include box-sizing(border-box);
}
.test-flex,
.test-grid {
  background-color: rgba(0,0,0,.1);
}

// --------------------------------------------------------------------------
// Breakpoints
// --------------------------------------------------------------------------
//
// Breakpoints are dependent of the $base-bpX variables. To add a new
// breakpoint add and extra variable "$base-bp4" etc. After that you'll
// need to append another "else if" argument below like this:
//
// @else if $breakpoint == bpX {
//   @media (min-width: $bpX) {
//     @content;
//   }
// }
//
// In addition you also need to add another set of grid units to go with
// you're new breakpoint. See the "if $use-grid {..."-control futher down
// in this file.
//
// --------------------------------------------------------------------------

@mixin breakpoint($breakpoint) {
  // Breakpoint 1
  @if $breakpoint == bp1 {
    @media (min-width: $base-bp1) {
      @content;
    }
  }
  // Breakpoint 2
  @else if $breakpoint == bp2 {
    @media (min-width: $base-bp2) {
      @content;
    }
  }
  // Breakpoint 3
  @else if $breakpoint == bp3 {
    @media (min-width: $base-bp3) {
      @content;
    }
  }
  // If you want more breakpoints add extra after this comment.
} // mixin breakpoints

// --------------------------------------------------------------------------
// Baseline grid
// --------------------------------------------------------------------------
//
// The baseline grid sets a baseline grid for controling vertical flow.
//
// --------------------------------------------------------------------------

@if $use-baseline-grid {
  html {
    font-size: $base-font-size;
    font-weight: 300;
    background-color: #ffffff;
    color: #000000;
    @if $base-font-auto-scale {
      @include breakpoint(bp1) {
        font-size: $base-font-size* 1.125;
      }
      @include breakpoint(bp2) {
        font-size: $base-font-size * 1.25;
      }
      @include breakpoint(bp3) {
        font-size: $base-font-size * 1.375;
      }
    }
  }
  body {
    font-family: $base-font-family;
    line-height: 1.5;
  }
  h1,h2,h3,h4,h5,h6 {
    font-weight: 800;
  }
  h1,h2,h3,h4,h5,h6,p,ul,ol, hr {
    margin-bottom: 1.5rem;
  }
  h1 {
    font-size: 1.5rem;
    line-height: 1;
  }
  h2 {
    font-size: 1.375rem;
    line-height: 1.0909;
  }
  h3 {
    font-size: 1.25rem;
    line-height: 1.2;
  }
  h4 {
    font-size: 1.125rem;
    line-height: 1.3334;
  }
  h5,
  h6 {
    font-size: 1rem;
    line-height: 1.5;
  }
  hr {
    height: 1px;
    margin-top: -1px;
    border: none;
    background-color: #000000;
  }
  ul {
    list-style: outside square;
  }
  ol {
    list-style: outside decimal;
  }
  ul,
  ol {
    margin-left: 1.5rem;
  }
  strong {
    font-weight: 800;
  }
  em {
    font-style: italic;
  }
} // if use-normalizer

// --------------------------------------------------------------------------
// Responsive base
// --------------------------------------------------------------------------
//
// --------------------------------------------------------------------------

img,
video,
iframe {
  display: block;
  max-width: 100%;
  height: auto;
}

// --------------------------------------------------------------------------
// Grid
// --------------------------------------------------------------------------
//
// This basic proportional grid contains units for three breakpoints and up
// to four columns in a row. You can nest infinitly.
//
// --------------------------------------------------------------------------

// Sets up base classes for rows, cols and optional gutter, flow etc.
@mixin build-grid-base {
  .row,
  .col {
    overflow: hidden;
  }
  // Basic row class.
  .row {
    position: relative;
    margin-left: -$base-spacing-unit;
    margin-bottom: 0;
    list-style: none;
  }
  // Eliminates double gutter.
  .row > .row {
    margin-left: 0;
  }
  // Basic col class.
  .col {
    float: left;
    padding-left: $base-spacing-unit;
    width: 100%;
  }
  // Halves the gutter
  .gutter--half {
    margin-left: -$base-spacing-unit-half;
  }
  .gutter--half > .col {
    padding-left: $base-spacing-unit-half;
  }
  // Removes negative margin from parent (row, wrap).
  .gutter--none {
    margin: 0;
  }
  // Removes gutter from children (cols and items).
  .gutter--none > .col {
    padding: 0;
  }
  // Flips negative margins for row that contains reversed cols
  .reverse-flow {
    margin-left: 0;
    margin-right: -$base-spacing-unit;
  }
  // Reverses children cols of the row.
  .reverse-flow > .col {
    float: right;
    padding-left: 0;
    padding-right: $base-spacing-unit;
  }
} // mixin build-grid-base
// Builds all grid col sizes.
@mixin build-grid-units($namespace) {
  .row--#{$namespace}full-cols > .col,
  .col--#{$namespace}full {
    width: 100%;
  }
  .col--#{$namespace}three-quarters {
    width: 75%;
  }
  .col--#{$namespace}two-thirds {
    width: 66.6666%;
  }
  .row--#{$namespace}two-cols > .col,
  .col--#{$namespace}half {
    width: 50%;
  }
  .row--#{$namespace}three-cols > .col,
  .col--#{$namespace}third {
    width: 33.3333%;
  }
  .row--#{$namespace}four-cols > .col,
  .col--#{$namespace}quarter {
    width: 25%;
  }
  .row--#{$namespace}five-cols > .col,
  .col--#{$namespace}fifth {
    width: 20%;
  }
  .row--#{$namespace}six-cols > .col,
  .col--#{$namespace}sixth {
    width: 16.6666%;
  }
  .row--#{$namespace}seven-cols > .col,
  .col--#{$namespace}seventh {
    width: 14.2857%;
  }
  .row--#{$namespace}eight-cols > .col,
  .col--#{$namespace}eight {
    width: 12.5%;
  }
} // mixin build-grud-base

// Initiates grid if $use-grid: true;.
//
@if $use-grid {
  // Fetch base classes
  @include build-grid-base();
  // Build base col sizes
  @include build-grid-units("");
  // Build breakpoint 1 col sizes
  @media (min-width: $base-bp1) {
    @include build-grid-units("bp1-");
  }
  // Build breakpoint 2 col sizes
  @media (min-width: $base-bp2) {
    @include build-grid-units("bp2-");
  }
  // Build breakpoint 3 col sizes
  @media (min-width: $base-bp3) {
    @include build-grid-units("bp3-");
  }
  // If you've added a new breakpoint you also need to add another
  // call for grid classes to go with that breakpoint. This is how.
  //
  // // Build breakpoint X col sizes
  // @media (min-width: $base-bpX) {
  //   @include build-grid-units("bpX-");
  // }
} // if $use-grid



// --------------------------------------------------------------------------
// Helpers
// --------------------------------------------------------------------------
//
// These are additional classes often generically used.
//
// --------------------------------------------------------------------------

@if $use-helpers {
  .container {
    width: 95%;
    max-width: 50rem;
    margin-left: auto;
    margin-right: auto;
  }
  .limiter {
    padding-left: $base-spacing-unit;
    padding-right: $base-spacing-unit;
  }
  .center-txt {
    text-align: center;
  }
  .faded {
    color: #ccc;
  }
  .max-width-txt {
    max-width: 37rem;
  }
  .padded {
    padding: 0 $base-spacing-unit;
  }
  .padded--half {
    padding: 0 $base-spacing-unit-half;
  }
  .margin-bottom {
    margin-bottom: $base-spacing-unit;
  }
  .margin-bottom-none {
    margin-bottom: 0 !important;
  }
  // Used to unstyle lists.
  .unstyled {
    margin-left: 0;
    list-style: none;
  }
  .group {
  zoom: 1;
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}
} // if $use-helpers

// --------------------------------------------------------------------------
// Tiles
// --------------------------------------------------------------------------
//
// Markup works like so:
//
//  <div class="tile">
//    <img src="...">
//    <div class="tile__overlay tile__overlay--dark">...</div>
//  </div>
//
// --------------------------------------------------------------------------

@if $use-tiles {
  .tile {
    position: relative;
    overflow: hidden;
  }
  .tile__overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: $base-spacing-unit-quarter;
  }
  .tile__overlay--dark {
    background-color: #000000;
    background-color: rgba(0,0,0,.6);
    color: #ffffff;
  }
  .tile__overlay--light {
    background-color: #ffffff;
    background-color: rgba(255,255,255,.6);
    color: #000000;
  }
} // if $use-titles-and-galleries

// --------------------------------------------------------------------------
// Image Module
// --------------------------------------------------------------------------
//
// --------------------------------------------------------------------------

@if $use-image-module {
  .featured-image {
    width: 100%;
    margin-bottom: $base-spacing-unit;
  }
} // if $use-image-module

// --------------------------------------------------------------------------
// Video Module
// --------------------------------------------------------------------------
//
// --------------------------------------------------------------------------

@if $use-video-module {
  .fluid-width-video-wrapper {
    width: 100%;
    margin-bottom: $base-spacing-unit;
  }
} // if $use-video-module

// --------------------------------------------------------------------------
// Flexbox grid
// --------------------------------------------------------------------------
//
// NOT FUNCTIONAL
//
   $use-flexbox-grid: false;
//
// --------------------------------------------------------------------------

// Mixin of new and old flexbox syntax from Chris Coyier, read more at:
// http://css-tricks.com/using-flexbox/
@mixin flexbox-display() {
  display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
  display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: -webkit-flex;     /* NEW - Chrome */
  display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
} // mixin flexbox-display

// Takes values in the format: [1] [1] [100%]
@mixin flexbox-flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
} // mixin flexbox-flex

// Takes one numerical value.
@mixin flexbox-order($namespace) {
  .item--#{$namespace}1 {
    -webkit-box-ordinal-group: 1;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 1;      /* OLD - Firefox 19- */
    -ms-flex-order: 1;              /* TWEENER - IE 10 */
    -webkit-order: 1;               /* NEW - Chrome */
    order: 1;
  }
  .item--#{$namespace}2 {
    -webkit-box-ordinal-group: 2;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 2;      /* OLD - Firefox 19- */
    -ms-flex-order: 2;              /* TWEENER - IE 10 */
    -webkit-order: 2;               /* NEW - Chrome */
    order: 2;
  }
  .item--#{$namespace}3 {
    -webkit-box-ordinal-group: 3;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 3;      /* OLD - Firefox 19- */
    -ms-flex-order: 3;              /* TWEENER - IE 10 */
    -webkit-order: 3;               /* NEW - Chrome */
    order: 3;
  }
  .item--#{$namespace}4 {
    -webkit-box-ordinal-group: 4;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 4;      /* OLD - Firefox 19- */
    -ms-flex-order: 4;              /* TWEENER - IE 10 */
    -webkit-order: 4;               /* NEW - Chrome */
    order: 4;
  }
  .item--#{$namespace}5 {
    -webkit-box-ordinal-group: 5;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 5;      /* OLD - Firefox 19- */
    -ms-flex-order: 5;              /* TWEENER - IE 10 */
    -webkit-order: 5;               /* NEW - Chrome */
    order: 5;
  }
  .item--#{$namespace}6 {
    -webkit-box-ordinal-group: 6;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 6;      /* OLD - Firefox 19- */
    -ms-flex-order: 6;              /* TWEENER - IE 10 */
    -webkit-order: 6;               /* NEW - Chrome */
    order: 6;
  }
  .item--#{$namespace}7 {
    -webkit-box-ordinal-group: 7;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 7;      /* OLD - Firefox 19- */
    -ms-flex-order: 7;              /* TWEENER - IE 10 */
    -webkit-order: 7;               /* NEW - Chrome */
    order: 7;
  }
  .item--#{$namespace}8 {
    -webkit-box-ordinal-group: 8;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: 8;      /* OLD - Firefox 19- */
    -ms-flex-order: 8;              /* TWEENER - IE 10 */
    -webkit-order: 8;               /* NEW - Chrome */
    order: 8;
  }
} // mixin flexbox-order

// Takes two space seperated strings.
@mixin flexbox-flow($args) {
  -webkit-flex-flow: $args;
  -moz-flex-flow: $args;
  -ms-flex-flow: $args;
  flex-flow: $args;
} // mixin flexbox-flow

// Sets up base classes for wrappers, items
@mixin build-flex-base {
  .wrap {
    // @include display-box; // Compass helper, not the corret syntax 130731.
    @include flexbox-display;
    @include flexbox-flow(row wrap);
    margin-left: -$base-spacing-unit;
    overflow: hidden;
  }
  .item {
    overflow: hidden;
    padding-left: $base-spacing-unit;
  }
} // mixin build-flex-base

// Builds all flex items and order controls
@mixin build-flex-items($namespace) {
  .wrap--#{$namespace}full-items > .item,
  .item--#{$namespace}full {
    @include flexbox-flex(0 0 100%);
  }
  .item--#{$namespace}three-quarters {
    @include flexbox-flex(0 0 75%);
  }
  .item--#{$namespace}two-thirds {
    @include flexbox-flex(0 0 66.6666%);
  }
  .wrap--#{$namespace}two-items > .item,
  .item--#{$namespace}half {
    @include flexbox-flex(0 0 50%);
  }
  .wrap--#{$namespace}three-items > .item,
  .item--#{$namespace}third {
    @include flexbox-flex(0 0 33.3333%);
  }
  .wrap--#{$namespace}four-items > .item,
  .item--#{$namespace}quarter {
    @include flexbox-flex(0 0 25%);
  }
  .wrap--#{$namespace}five-items > .item,
  .item--#{$namespace}fifth {
    @include flexbox-flex(0 0 20%);
  }
  .wrap--#{$namespace}six-cols > .item,
  .item--#{$namespace}sixth {
    @include flexbox-flex(0 0 16.6666%);
  }
  .wrap--#{$namespace}seven-cols > .item,
  .item--#{$namespace}seventh {
    @include flexbox-flex(0 0 14.2857%);
  }
  .wrap--#{$namespace}eight-cols > .item,
  .col--#{$namespace}eight {
    @include flexbox-flex(0 0 12.5%);
  }
} // mixin build-flex-items

@if $use-flexbox-grid {
  @include build-flex-base();
  @include build-flex-items("");
  @include flexbox-order("");

  @media (min-width: $base-bp1) {
    @include build-flex-items("bp1-");
    @include flexbox-order("bp1-");
  }
  // Build breakpoint 2 col sizes
  @media (min-width: $base-bp2) {
    @include build-flex-items("bp2-");
    @include flexbox-order("bp2-");
  }
  // Build breakpoint 3 col sizes
  @media (min-width: $base-bp3) {
    @include build-flex-items("bp3-");
    @include flexbox-order("bp3-");
  }
} // if $use-flexbox-grid